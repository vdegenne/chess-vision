import{c as u}from"./index-DXvZVUWJ.js";import{u as p,h as m,J as l,k as f,a as v,A as g}from"./index-CclYMftJ.js";const h="";var b=Object.defineProperty,w=Object.getOwnPropertyDescriptor,c=(a,i,e,t)=>{for(var o=t>1?void 0:t?w(i,e):i,r=a.length-1,s;r>=0;r--)(s=a[r])&&(o=(t?s(i,e,o):s(o))||o);return t&&o&&b(i,e,o),o};let n=class extends m{constructor(){super(...arguments),this.open=!1}firstUpdated(){l.bind(this)}render(){const a=l.sortedSuccess,i=l.sortedFailures,e=l.statsMap.reduce((s,d)=>s+=d.success,0),t=l.statsMap.reduce((s,d)=>s+=d.failure,0),o=e/(e+t),r=t/(e+t);return f`<md-dialog ?open="${this.open}" @close="${()=>this.open=!1}"><header slot="headline">Stats</header><form slot="content" method="dialog" id="form"><div style="margin-bottom:24px"><b>Game played: </b>${e+t}</div><div><b>Success rate: </b>${o.toFixed(1)}</div><success-failure-rate-linear-progress></success-failure-rate-linear-progress><div style="text-align:end"><b>Failure rate: </b>${r.toFixed(1)}</div><div style="margin-top:24px"><b>Most faileds: </b>${i.slice(0,4).map(s=>s.square).join(", ")}</div><div><b>Most succeededs: </b>${a.slice(0,4).map(s=>s.square).join(", ")}</div></form><div slot="actions"><md-text-button form="form">Close</md-text-button></div></md-dialog>`}async show(){if(this.dialog.open){const a=new Promise(i=>{const e=()=>{i(null),this.dialog.removeEventListener("closed",e)};this.dialog.addEventListener("closed",e)});this.dialog.close(),await a}this.open=!0}close(a){return this.dialog.close(a)}};c([p()],n.prototype,"open",2);c([v("md-dialog")],n.prototype,"dialog",2);n=c([u({name:"stats-dialog",inject:!0}),g(h)],n);const C=window.statsDialog=new n;export{C as statsDialog};
